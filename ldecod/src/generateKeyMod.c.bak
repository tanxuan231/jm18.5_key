#include "stdio.h"
#include <stdint.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

#define SEEK_SET 0

/*½«xµÄµÚyÎ»ÉèÎª0*/
#define clrbit(x,y) x&=~(1<<y)

/*½«xµÄµÚyÎ»ÉèÎª1*/
#define setbit(x,y) x|=(1<<y)


typedef struct
{
	uint8_t* start;
	uint8_t* p;
	uint8_t* end;
	int bits_left;
} bs_t;

static inline int bs_eof(bs_t* b) { if (b->p >= b->end) { return 1; } else { return 0; } }

static inline bs_t* bs_init(bs_t* b, uint8_t* buf, size_t size)
{
    b->start = buf;
    b->p = buf;
    b->end = buf + size;
    b->bits_left = 8;
    return b;
}

static inline bs_t* bs_new(uint8_t* buf, size_t size)
{
    bs_t* b = (bs_t*)malloc(sizeof(bs_t));
    bs_init(b, buf, size);
    return b;
}

static inline void bs_free(bs_t* b)
{
    free(b);
}

static inline uint32_t bs_read_u1(bs_t* b)
{
    uint32_t r = 0;
    
    b->bits_left--;

    if (! bs_eof(b))
    {
        r = ((*(b->p)) >> b->bits_left) & 0x01;
    }

    if (b->bits_left == 0) { b->p ++; b->bits_left = 8; }

    return r;
}
/*¶ÁbufferµÄÇ°nÎ»£¬½á¹ûÒÔÊ®½øÖÆu32 return*/
static inline uint32_t bs_read_u(bs_t* b, int n)
{
    uint32_t r = 0;
    int i;
    for (i = 0; i < n; i++)
    {
        r |= ( bs_read_u1(b) << ( n - i - 1 ) );
    }
    return r;
}

/*¶ÔÖ¸ÕëbÖ¸ÏòµÄ×Ö½ÚbufferÐ´Èëv*/
static inline void bs_write_u1(bs_t* b, uint32_t v)
{
    b->bits_left--;

    if (! bs_eof(b))
    {
        /* FIXME this is slow, but we must clear bit first
         is it better to memset(0) the whole buffer during bs_init() instead? 
         if we don't do either, we introduce pretty nasty bugs*/
        (*(b->p)) &= ~(0x01 << b->bits_left);
        (*(b->p)) |= ((v & 0x01) << b->bits_left);
    }

    if (b->bits_left == 0) { b->p ++; b->bits_left = 8; }
}

/*¶ÔÖ¸ÕëbÖ¸ÏòµÄ×Ö½ÚbufferµÄÇ°nbitÎ»Ð´Èëv*/
static inline void bs_write_u(bs_t* b, int n, uint32_t v)
{
    int i;
    for (i = 0; i < n; i++)
    {
        bs_write_u1(b, (v >> ( n - i - 1 ))&0x01 );
    }
}

/*NumberÐèÒª¶àÉÙ¸öbitÎ»ÈÝÄÉ*/
int GetNeedBitCount(unsigned int Number,int *BitCount )
{
	int i32Count=0;
	if(Number<0)
	{
		return -1;
	}
	if(Number==0)
	{
		i32Count=1;
		return 0;
	}
	while(Number!=0)
	{
		i32Count++;
		Number/=2;
	}
    *BitCount=i32Count;
	return 0;
}

int Write_KeyFile(uint32_t RelativeByteOffset,uint32_t BitOffset,uint32_t BitLength,uint32_t data,FILE *KeyFile)
{
	uint8_t *u8Buffer;
	uint32_t u32ByteOffsetBitNum=0;
	uint32_t u32ByteOffsetByteNum=0;	
	int keyBitNumer1;
	int keyBitNumer2;
	int keyBitNumer3;
	int keyBitNumer4;
	int keyBitNumer5;
	bs_t *b;
	uint8_t binary[30]={0x00};
	int i=0;
	/*KeyByteLengthÊÇkeyÐèÒª¶àÉÙ¸ö×Ö½Ú*/
	size_t KeyByteLength;
	
	if(-1 == GetNeedBitCount(RelativeByteOffset,&u32ByteOffsetBitNum))
	{
		return -1;
	}
	
	KeyByteLength=(8+u32ByteOffsetBitNum+3+5+32)/8;

	if((8+u32ByteOffsetBitNum+3+5+32)%8!=0)
	{
		KeyByteLength+=1;
	}
	
	u8Buffer=(uint8_t*)malloc(KeyByteLength*sizeof(uint8_t));
	/*½«key»º³åÇøÈ«ÖÃÎª0*/
	memset(u8Buffer,0x00,KeyByteLength);
	b=bs_new(u8Buffer,KeyByteLength);

	keyBitNumer1=8;
	keyBitNumer2=u32ByteOffsetBitNum;
	keyBitNumer3=3;
	keyBitNumer4=5;
	keyBitNumer5=32;

	bs_write_u(b,keyBitNumer1,u32ByteOffsetBitNum);
	bs_write_u(b,keyBitNumer2,RelativeByteOffset);
	bs_write_u(b,keyBitNumer3,BitOffset);
	bs_write_u(b,keyBitNumer4,BitLength);
	bs_write_u(b,keyBitNumer5,data);
	
	fputs(u8Buffer,KeyFile);
	free(u8Buffer);
	bs_free(b);
	return 1;
	
	
}

int Generate_Key(int RelativeByteOffset,int BitOffset,int BitLength,FILE* KeyFile,int h264fd)
{
	uint32_t keydata;
	int i,j,k=0;
	int temp=0;
	int ByteCount=0;
	int BitCount=0;
	int BitPos=0;
	bs_t *b;
	int bitValue=0;
	uint8_t *buffer;
	size_t bufferLen=4;
	//int RelativeByteOffset=ByteOffset-LastByteOffset;
	buffer=(uint8_t *)malloc(bufferLen*sizeof(uint8_t));
	memset(buffer,0x00,bufferLen);
	
	b=bs_new(buffer,bufferLen);
	ByteCount=(BitOffset+BitLength)/8;
	
	if((BitOffset+BitLength)%8!=0)
	{
		ByteCount+=1;
	}

	static int first_call_key = 0;
	if(!first_call_key)
	{
		lseek(h264fd,0,SEEK_SET);
		first_call_key = 1;
	}
	
	for(i=0;i<ByteCount;i++)
	{
		off_t currpos = lseek(h264fd,0,SEEK_CUR);
		if(!i)
			currpos = lseek(h264fd,RelativeByteOffset+i,SEEK_CUR);
		
		//keydata=fgetc(h264fd);	
		read(h264fd,&keydata,1);
		//printf("before keydata====0x%x\n",keydata);
		/*µÚÒ»¸ö×Ö½Ú*/		
		if(0==i)
		{
			if(BitLength>8)
			{
				BitCount=8-BitOffset;
			}
			else
			{
				BitCount=BitLength;
			}
			
			BitPos=7-BitOffset;
		}
		else if((ByteCount-1==i))
		{			
			/*×îºóÒ»¸ö×Ö½Ú*/
			if((BitLength+BitOffset)%8==0)
			{
				BitCount=8;
			}
			else
			{
				BitCount=(BitLength+BitOffset)%8;
			}
			
			BitPos=7;				
		}
		else
		{		
			/*ÖÐ¼äµÄ×Ö½Ú*/
			BitCount=8;
			BitPos=7;
		}
		/*½«BitPosÆðÊ¼Î»µÄºóBitCountÎ»ÉèÖÃÎª0*/
		for(j=0;j<BitCount;j++)
		{
			/*µÃµ½BitPosÉÏbitÎ»µÄÖµ*/
			bitValue=(keydata>> (BitPos)) & 0x01;
			bs_write_u1(b,bitValue);
			clrbit(keydata,BitPos);
			BitPos--;
		}
		
		//printf("after: keydata==0x%x\n",keydata);
		currpos = lseek(h264fd,-1,SEEK_CUR);
		/*½«Ìæ»»µÄÄÚÈÝÐ´ÈëÎÄ¼þ*/
		write(h264fd,&keydata,1);		
			
	}
	
	keydata=0;
	
    for(i=0;i<4;i++)
    {
	   temp=(uint32_t)(buffer[i]&0xff);
	   temp=temp<<(3-i)*8;
	   keydata=keydata+temp;

    }
	
	//printf("get key data==0x%x\n",keydata);
	bs_free(b);
	free(buffer);
	Write_KeyFile(RelativeByteOffset,BitOffset,BitLength,keydata,KeyFile);
	return 1;
}

